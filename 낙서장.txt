        node.js :  브라우저밖에서 javascript가 돌아가게 해줌 
                   node.js를 설치하면 터미널 창에서 javascript를 실행할 수 있다.
                   스크립트언어는 특정 프로그램안에서만 작동하기 때문에 등장
                   javascript 런타임이다
                   런타임 : 특정 언어로 만든 프로그램을 실행할 수 있는 환경
                   javascript로 백엔드서버를 만들기위한 런타임 환경

        npm : javascript 언어를 위한 패키지 매니저, 여러 패키지를 불러올 수 있다.
              node.js와 같이 사용된다 node.js 설치하면서 같이 자동 설치됨

        json : 파일에 정보를 저장하는 방식을 유저가 설정, node.js를 위해 반드시 package.json 이라고 짓는다.

        dependencies : 프로젝트에 필요한 dependencies
        Devdependencies : 개발자를 위한 dependencies

        babel : 최신 문법 코드를 사용할 수 있게해준다.(최신 => 예전)

        nodemon : 파일이 수정되는걸 감시해주는 패키지, 수정되면 알아서 재시작해준다.



        ===========================================
        08-01 서버 node.js로 서버 구축
        
        1.src 폴더에 로직,코드 저장
        파일들이 많아 져서 모든 코드나 로직들을 src폴더에다 저장


        08-02 middleware

        middleware : request와 response 사이에 있는 중간소프트웨어
        일반적으로 중간에 있는 함수가 해당하고 controller라 불린다(argument로 req, res,next 존재)
        함수가 다른함수를 호출하는 것을 middleware라고 한다.(쉽게 말해 토스)
        next는 어디든 존재 가능

        app.use() : global middleware를 만들어준다.

        middleware가 next()를 호출 안하면 다음 함수는 실행되지 않는다.

        middleware의 여러정보가 기록되는 -morgan-을 설치한다.


        08-03 Router
        
        router : 컨트롤어와 URL관리를 쉽게 해준다.
        server_4-1.js 파일 보면서 router만들고 따로 분리 해준다   
        export 하는 이유 : 모든프로젝트는 분리된 모듈이여서 바깥에 공유하기 위해서는 반드시 해야한다.
        default 하는 이유  :폴더 전체를 줄 필요가 없으니까 변수만 넘겨준다.(하나 밖에 안된다.)
        
        Router와Controller를 분리해준다.     
        각각의 Controller를 export 해줘서 오브젝트{} 형식으로 import해준다.
        :id : url에 변수를 넣어줘서 관리를 해준다      -> : <- : 파라미터 필수
        

        08-04 html 요소 추가하기

        pug설치(npm i pug)
        pug : 템플릿을 이용해서 뷰만드는것을 도와준다
        express에게 뷰엔진으로 pug를 사용한다고 알려줘여한다.
        app.set("view engine", "pug")
        express가 cwd(현재 작업 디렉터리)에서 "views"라는 폴더를 찾아 퍼그를 실행한다. 그래서 폴더를 만들어준다.
        express의 현재 작업 공간은 node.js를 실행하는 공간이다 그래서 주소를 변경해줘야 한다.
        app.set("views", process.cwd() + "/src/views");
        중복된 코드는 따로 폴더(partials)를 만들어 본문에 include partials/footer.pug 해준다.
        여기서도 상속을 할 수 있다. 많이 중복되는 코드는 한 파일을 상속 시켜준다
        한 기능만 다르게 하고 싶으면 block 설정을해서 content를 위한 공간을 마련해준다.

        include, extends는 수정을 하지않냐 하냐에 따라 나뉜다

        render() : 렌더링을 하면서 실행할 pug와 변수들을 넘겨줄 수 있다.


        08-05 새로운 middleware MVP.css 설치, 조건,반복문, mixin연습
        
        css는 최종적으로 나중에 한다.
        하지만 조금 예쁘게 보이기 위해 설치.
        MVP.css 홈페이지가서 링크만 복사
        MVP : html 태그에 몇 가지 기본 스타일을 입혀준다.
        주소를 head안에 넣어준다.
        조건문 연습
        반복문 연습
        1.pug문법으로 배열을 each 변수 in 배열 로 가져올 수 있고, 배열이 이었다면 else를 해서 예외처리 가능
        html구조가 반복되면 mixin을 설정
        

        08-05 database
        배열로 가짜 db를 만들어서 연습
        params은 기본적인 내용(id, name)을 있으면 자동으로 알려준다.
        절대경로 :  / 붙혀준다., 루트에서 시작
        상대경로 : 그냥 주소만 붙혀준다. , 현재 주소에서 시작
        form(method) : method는 폼의 정보를서버에 보내는 방식
        action :데이터들을 url로 보낼수가 있다.
        기본값 : GET
        GET : 서버가 어떠한 정보를 가져와 조회할 때 사용하는 방식, 단순히 데이터만 받는 것이 목적
              그냥 무엇을 가져온다는 느낌
        POST : 데이터를 서버로 보내 추가, 수정하기 위해 사용하는 방식, back-end로 보낼 때 사용, 보통 form에서 사용
               그냥 무엇을 넘겨준다는 느낌
        항상 뭐든지 get을 하고 post를 해줘야 한다.


        08-07 mongoDB
        
        1. mongodb설치 
        1-1 : chocolatey 설치하여 mongoDB 설치
        2. mongoose설치
            mongoose : node.js와 mongodb를 연결해준다.
            npm i mongoose

        3.mongodbsh를 실행해서 url을 가져온다.
        
        db에서 자료를 가져오는 방식은 callback과 promise 방식이 있지만 현재 버전 업데이트로인해 promoise방식만 사용
        db.videos.find() : mongodb에서 데이터보기


        08-08

        해당 id 찾는법
        1. await videos.findById(id);   <--- 난 이게 좋다
        2. await Video.exit({_id: id})
        
        업데이트 쉽게 하기

        Video.findByIdAndUpate(id, {업데이트 내용})   <--- 무조건 이거 써라


        08-09 해시테그middleware, 중복함수 정의, search만들기

        db용 middleware 만들기
        db가 save하기전에 실행할 미들웨어, this로 접근가능
        해시테그에 관한 미들웨어 생성
        아니면 해시테그  관한 함수를 만들어서 export하고 import해서 함수를 사용한다.
        여러 방법들이 있다.편한거 써라

        db명령어
            2. 내가 가진 db 보기
            > show dbs

            3. 현재 사용 중인 db 확인
            > db

            4. 사용할 db 선택하기
            > use dbName
            (현재 수업에서는 `use wetube`)

            5. db 컬렉션 보기
            > show collections

            6. db 컬렉션 안에 documents 보기
            > db.collectionName.find()
            (현재 수업에서는 `db.videos.find()`)

            7. db 컬렉션 안에 documents 내용 모두 제거하기
            > db.collectionName.remove({})

         다시 말하는데 render(사용할 퍼그, 넘겨줄 변수)


         08-10 userLogin 만들기
         
         video만드는거랑 큰 차이가 없다
         이제 비번만 비공개(해시화)?처리만 다르다.
         해싱 : 알수없는 문자열로 변환해준다.

         bcrypt : 해싱 페키지


         08-11 유저를 기억할 수 있게 하기

         1.유저에게 쿠키를 보내준다 
            세션 : 백엔드와 브라우저사이의 어떤활동
            세션 설치(express-session)
            유저가 백엔드에 get을 할때마다 어떤 텍스트(session.id)도 같이 보내 기억
            즉 유저가 백엔드로 쿠키로 보내 기억
            서버가 브라우저한테 세션을준다
            받은 세션의 id를 가지고 백엔드가 우리가 누구인지 안다.
            즉 유저에게 session.id를줘서 방문할때마다 백엔드에서 session.id를보고 판별
            쿠키는 정보를 주는 방법이다.
            쿠키에는 id만 저장되고 data는 서버에 저장된다.       

            그래서 connect-mongo 설치 
            session의 모든 정보들이 db에 저장

            비공개를 원하는 코드를 위해서 .env파일생성

            dotenv설치


            08-12 github 로그인
            
            로그인 셋팅
            1. https://github.com/settings/apps/ 
            2. OAuth Apps


            1.사용자를 github로 보낸다
            https://github.com/login/oauth/authorize?clien_id=셋팅한 client_id   <-여기로
            잡기술
            &allow_signup=false : 기존 github회원만 사용가능
            &scope : 유저가 원하는 정보를 요청한다.
            예) scope:user:email 등등
                user:email delete_repo 등등 요청이 여러개면 공백으로 구분

            이후로는 어렵다 외우자


            08-16

                파일을 백엔드 업로드를 위한 multer middlewere 설치
                해당 폼에 enctype="multipart/form/data"을 해야 업로드 가능
                그리고 나서 미들웨어코드 작성
                DB에는 파일을 저장하는 것이 아니라 경로만 저장하게 해준다!!!!
                경로를 브라우저가 인식을 잘 못하니 전역으로 설정해준다.


            08-18

                video 업로드는 사진이랑 비슷
                video와 user를 서로 연결해준다
                populate : 해당 요소의 객체에 대한 모든 정보를 얻을 수 있다.


            08-20

                지금까지 한것들은 저분 백엔드에서 돌아가는 코드
                이제부터는 프론트엔드에서 돌아가게 하는 코드를 작성
                webpack : babel과 비슷 babel이 백엔드 부분, webpack은 프로트엔드 부분
                          최신 ====> 옛날
                          실제로는 직접 사용하지는 않지만 이미 설치된 툴을 사용한다.
                          배우는 과정이니까 직접 해보는것

                1. webpack webpack-cli -D
                2. webpack.config.js 폴더생성
                3. package의 script추가
                   "assets": "webpack -config webpack.config.js"
                
                rules : 파일의 종류에 따라 변환하는 방법

                SCSS : 또다른 CSS??

                SCSS loader설치
                sass-loader sass webpack --save-dev
                --save-dev css-loader
                --save-dev style-loader

                편의성을 위한 패키지 설치


                08-21
                    css작업
                    기존의 css 파일 지우고
                    https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css

                
                08-22
                    비디오 꾸미기

                08-23
                    비디오 꾸미기

                08-24
                    조회수 만들기
                    apiRouter 폴더생성
                08-26
                    비디오 녹화기능
                    FFmpeg : 비디오 관련 작업을 도와주는 소프트웨어
                08-27
                    FFmpeg 버전오류, 썸네일 작업 마무리
                08-28
                    팀원들에게 1차시연
                08-29
                    express-flash : 템플릿 사용자에게 메시지를 남길 수 있게 하는 미들웨어
                    그닥 중요한 것이 아니다.
                    댓글기능만들기
                    스키마도 다시 만들고 db에 연동함
                



            